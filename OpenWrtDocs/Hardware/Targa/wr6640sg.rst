
XXXX Work-In-Progress - page copied from fonera ... XXXX

||<tablebgcolor="#f1f1ed" tablewidth="40%" tablestyle="margin: 0pt 0pt 1em
1em; float: right; font-size: 0.9em;"style="padding:
0.5em;">[[TableOfContents]]||


= WR6640Sg =
The Silvercrest Super G Wireless Router is based on an Atheros System on Chip
(SoC). So it's a candidate for the OpenWrt AtherosPort.

= Hardware =
== Info ==
||<tablewidth="460px" tableheight="345px">'''Architecture''' ||MIPS 4KEc, BigEndian ||
||'''Vendor''' || Targa (Silvercrest, sold by Lidl) ||
||'''Bootloader''' || PMon ? ||
||'''System-On-Chip''' ||Atheros AR2313A ||
||'''CPU Speed''' ||184 MHz ||
||'''Flash''' || 2 Mb, MX29LV160 ||
||'''RAM''' || 16 Mb ||
||'''Wireless''' ||Integrated Atheros 802.11b/g, AR2112A ||
||'''Ethernet''' ||5 x RJ45 (4 Lan, 1 Wan) ||
||'''Ethernet Switch''' || Marvell 88E6060 ||
||'''USB''' ||No ||
||'''Serial''' ||Yes ||
||'''JTAG''' || Yes ||
 * 12V power supply
 * Antenna
 * SPI-Bus ???
Power:

12V power supply, internally this is regulated to 3.3V by a switched
regulator. Device starts up at >=7.5v, to get wireless working it needs >=10V.
This device  needs only ~3.5W of power, so it's well suited for
solarpowered/batterypowered applications (like the 4Km wireless link i've
built).

== Photo ==
Here's a photo of the PCB:

http://www.ibrieger.de/images/silvercrest.jpg

== Serial Port ==
The RS232 port is using 3.3V TTL signals, we have to use a level shifter like
the Maxim Max232. In addition i'm using a RS232<->USB converter to connect it
to my PC (linux+minicom).

Serial settings are 56700-8-N-1.

{{{
PINS:

+---+
|TXD|
+---+
|RXD|
+---+
|GND|
+---+
|   |
+---+
|VCC| 3.3V
+---+
}}}
== JTAG ==
There is a 14 pin unpopulated JTAG header, pin assignment:

XXX todo

= Original software =

== Bootlog Original "PMon" bootloader ==
{{{

00005850

Copyright (c) 2003 Xavi Corporation.
Chip select 0, Flash chip MXIC CFI-160 bottom, address 0xbfc00000, size
2MBytes
Slot 0, blocks 0, sector size = 0x4000, num of sectors = 1
Slot 0, blocks 1, sector size = 0x2000, num of sectors = 2
Slot 0, blocks 2, sector size = 0x8000, num of sectors = 1
Slot 0, blocks 3, sector size = 0x10000, num of sectors = 31
CPU type ATHEROS 5312. ErrorEPC (may be PC before reset): bfc006c0. 
CPU clock frequency 180 MHz. Avail RAM 16022 KBytes.
 
PMON version 6.8.858 [EB], Mon Jul  5 16:11:38 CST 2004

IP address 192.168.1.1
Type 'h' for on-line help. 

 

*** Press ^C to abort auto run (3 seconds) ***
Auto run second count down: 1break!
XGATE> h
load  load memory from hostport          h  The help command             
help  The help command                   ?  The help command             
copy  copy memory                        g  start execution (go)         
 sym  define symbol                    set  display/set variable         
   d  display memory                  dump  send srecs/binary to hostport
ping  send ping request to hostport   
XGATE> 

}}}

== Backup flash ==

Upload entire flash with PMon/tftp:
{{{
XGATE> dump -B 0xbfc00000 0x200000
Uploading to ethernet1, ^C to abort
Switch is set for 100 Mbps Full Duplex
Dumped data from bfc00000 to bfdfffff, length 200000 (2097152 decimal)
XGATE> 
}}}

== Flash layout ==

Flash size is 2Mb, we have 32 blocks of 64k size:

{{{

----------------------------------------------------------------------------------------
| Offset   | Abs. Offs. | Size    | Blocks | Content                                   |
----------------------------------------------------------------------------------------
| 0x000000 | 0xBFC00000 |  128 kb |      2 | Board Config, PMon Bootloader             |
----------------------------------------------------------------------------------------
| 0x020000 | 0xBFC20000 | 1792 kb |     28 | Linux with embedded rootfs (initramdisk)  |
----------------------------------------------------------------------------------------
| 0x1E0000 | 0xBFDE0000 |   64 kb |      1 | Radio Config, NVRam                       |
----------------------------------------------------------------------------------------
| 0x1F0000 | 0xBFDF0000 |   64 kb |      1 | Radio Config, NVRam                       |
----------------------------------------------------------------------------------------

}}}

== Auto download ==

If the bootloader doesn't find a valid linux image in flash it enters a "Auto
download" mode. It tries to download and install a image from tftp. The vendor
supplied images (for example WR-6640Sg-2.02TGF6.6640g.bin) can be used to restore 
the linux mtd-partition.

Host-Side:

{{{
    > atftp 192.168.1.1
    tftp> mode
    Current mode is octet.
    put WR-6640Sg-2.02TGF6.6640g.bin
}}}

AP-Side:

{{{
    *** Press ^C to abort auto run (3 seconds) ***
    Auto run second count down: 0
    Switch is set for 100 Mbps Full Duplex
    Downloading image from ethernet1, ^C to abort
    Loaded data from 80100000 to 802b8853, length 1b8854 (1804372 decimal)

    Write firmware image to flash.. 
    ............................
    Write image header to flash..
    .
    *** Write firmware image done *** !
}}}

=== Vendor Image format ===

The .bin image contains a 256 byte heder and a g-zipped linux kernel, to
extract the kernel do:

{{{
  dd if=WR-6640Sg-2.02TGF6.6640g.bin bs=256 skip=1 of=WR-6640Sg-2.02TGF6.6640g.image.gz
}}}

Extract initial ramdisk from kernel unzipped image:

    Bootlog says: ... Initial ramdisk at: 0x802e2000 (946176 bytes) ...,
    loadaddress is 0x80100000.

    Offset of ramdisk from image start: 0x802e2000 - 0x80100000 

{{{
    > dd if=WR-6640Sg-2.02TGF6.6640g.image of=ramdisk.gz bs=256 skip=7712 count=3696
    > gunzip ramdisk.gz
    > losetup /dev/loop0 ramdisk
    > mount -oloop /dev/loop0 /mnt/misc

    > ls /mnt/misc
    bin  dev  etc  lost+found  proc  sbin  upnp  var  web
}}}

The header format is not known, but its content is used by pmon and it refuses
to install a self-made image (version and crc mismatches ...).

I tried to install the g-zipped linux image directly into its mtd-partition
with no luck:

{{{
    > atftp 192.168.1.1
    tftp> mode
    Current mode is octet.
    tftp> put WR-6640Sg-2.02TGF6.6640g.image.gz

    Downloading image from ethernet1, ^C to abort
    Loaded data from 80100000 to 802b8753, length 1b8754 (1804116 decimal)

    copy -f 80100000 bfc20000 1b8754
}}}

XXX wie geth's weiter, meldungen?

== TFTP download of new firmware ==

A vendor firmare image can be pushed to the AP within the first 3 seconds after
reboot.

== Bootlog Original Linux ==

Note: we can do a reboot in PMon by issuing a "go" command, address is the location
of the bootloader in flash:

{{{
XGATE> g 0xbfc00000

00005850

Copyright (c) 2003 Xavi Corporation
Chip select 0, Flash chip MXIC CFI-160 bottom, address 0xbfc00000, size 2MBytes
Slot 0, blocks 0, sector size = 0x4000, num of sectors = 1
Slot 0, blocks 1, sector size = 0x2000, num of sectors = 2
Slot 0, blocks 2, sector size = 0x8000, num of sectors = 1
Slot 0, blocks 3, sector size = 0x10000, num of sectors = 31
CPU type ATHEROS 5312. ErrorEPC (may be PC before reset): bfc006c0. 
CPU clock frequency 180 MHz. Avail RAM 16022 KBytes.
 
PMON version 6.8.858 [EB], Mon Jul  5 16:11:38 CST 2004

IP address 192.168.1.1
Type 'h' for on-line help. 

 

*** Press ^C to abort auto run (3 seconds) ***
Auto run second count down: 0
found image at 0xbfc20000, length 0x1b8754
Inflating image at bfc20000 to 80100000
block 1block 2block 3block 4block 5block 6block 7block 8block 9block 10block 11block 12block 13block 14block 15block 16block 17block 18block 19block 20block 21block 22block 23block 24block 25block 26block 27block 28block 29block 30block 31block 32block 33block 34block 35block 36block 37block 38block 39block 40block 41block 42block 43block 44block 45block 46block 47block 48block 49block 50block 51block 52block 53block 54block 55block 56block 57
Total blocks 57
original crc 0xff2cdbeb and length 0x2c9000
UART clock set to 2812500

LINUX started...
<4>CPU revision is: 0001800a
<4>Primary instruction cache 16kB, physically tagged, 4-way, linesize 16 bytes.
<4>Primary data cache 16kB 4-way, linesize 16 bytes.
<4>Linux version 2.4.23-rc1 (ken@V_Server1) (gcc version 3.3.2) #1 Fri Jan 14 13:38:08 CST 2005
Clock rate set to 180000000
<4>Determined physical RAM map:
<4> memory: 00001000 @ 00000000 (reserved)
<4> memory: 000ff000 @ 00001000 (ROM data)
<4> memory: 002f3000 @ 00100000 (reserved)
<4> memory: 00bf2b00 @ 003f3000 (usable)
<4>Initial ramdisk at: 0x802e2000 (946176 bytes)
<4>On node 0 totalpages: 4069
<4>zone(0): 4069 pages.
<4>zone(1): 0 pages.
<4>zone(2): 0 pages.
<4>Kernel command line: ip=::::XGATE:eth0:none:100fs console=ttyS0,57600
<4>calculating r4koff... 000dbba0(900000)
<4>CPU frequency 180.00 MHz
<4>Using 90.000 MHz high precision timer.
<4>Calibrating delay loop... 179.81 BogoMIPS
<6>Memory: 12048k/12232k available (1741k kernel code, 184k reserved, 1016k data, 76k init, 0k highmem)
<6>Dentry cache hash table entries: 2048 (order: 2, 16384 bytes)
<6>Inode cache hash table entries: 1024 (order: 1, 8192 bytes)
<6>Mount cache hash table entries: 512 (order: 0, 4096 bytes)
<6>Buffer cache hash table entries: 1024 (order: 0, 4096 bytes)
<4>Page-cache hash table entries: 4096 (order: 2, 16384 bytes)
<4>Checking for 'wait' instruction...  available.
<4>POSIX conformance testing by UNIFIX
<6>Linux NET4.0 for Linux 2.4
<6>Based upon Swansea University Computer Society NET3.039
<4>Initializing RT netlink socket
<4>Starting kswapd
<6>Serial driver version 5.05c (2001-07-08) with no serial options enabled
<4><6>ttyS00 at 0xbc000003 (irq = 37) is a 16550A
<4>atherosboard: ar531x_board_init entry
<6>Generic MIPS RTC Driver v1.0
<6>ar531x_eth.c:v1.0, Mar 15, 2004 XAVi Technologies Corp., www.xavi.com
<4>RAMDISK driver initialized: 16 RAM disks of 3072K size 1024 blocksize
<6>AR5312 version 0x5 revision 0x0
<6>PPP generic driver version 2.4.2
<5>b_flash flash device: bfc00000 at 200000
<5> Amd/Fujitsu Extended Query Table v1.0 at 0x0040
<5>number of CFI chips: 1
<5>cfi_cmdset_0002: Disabling fast programming due to code brokenness.
<5>Creating 3 MTD partitions on "flash0":
<5>0x00000000-0x00020000 : "pmon"
<5>0x00020000-0x001e0000 : "linux image"
<5>0x001e0000-0x001f0000 : "nvram data storage"
<4>WatchDog starting-45...
<6>NET4: Linux TCP/IP 1.0 for NET4.0
<6>IP Protocols: ICMP, UDP, TCP, IGMP
<6>IP: routing cache hash table of 512 buckets, 4Kbytes
<6>TCP: Hash tables configured (established 512 bind 1024)
<6>eth1: Switch is set for 100 Mbps Full Duplex
<3>IP-Config: Incomplete network configuration information.
<4>ip_conntrack version 2.1 (127 buckets, 1016 max) - 352 bytes per conntrack
<4>init: ip_nat_quake3
<4>init: ip_nat_mms
<4>init: ip_conntrack_h323
<4>register h225 conntrack module
<4>ip_ct_h323 help registering helper callback=80266b68
<4>init: ip_nat_h323
<4>register h225 nat help module
<4>init: ip_conntrack_proto_gre
<4>init: ip_nat_proto_gre
<4>init: ip_conntrack_quake3
<4>ip_ct_quake3 help registering helper callback=80268270
<4>init: ip_conntrack_pptp
<4>ip_ct_pptp help registering helper callback=802685bc
<4>init: ip_conntrack_mms
<4>ip_ct_mms help registering helper callback=80268df4
<4>init: ip_conntrack_aoeii
<4>ip_tables: (C) 2000-2002 Netfilter core team
<4>init: ip_nat_standalone
<4>ipt_timer loading
<4>URLBLK init
<4>ipt_inbox loading
<6>NET4: Unix domain sockets 1.0/SMP for Linux NET4.0.
<6>NET4: Ethernet Bridge 008 for NET4.0
<5>RAMDISK: Compressed image found at block 0
<6>Freeing initrd memory: 924k freed
<4>VFS: Mounted root (ext2 filesystem) readonly.
<4>Freeing prom memory: 1020kb freed
<6>Freeing unused kernel memory: 76k freed

Starting /etc/rc
Mount ramdisk as /var
Mount /proc
Create /var/tmp/
Create /var/run/utmp
Enabling IP forwarding
# nvram_retrieve_vars: total nvram data size = 4291
nvram_retrieve_vars: app id = 1, nvram data size = 542
nvram_retrieve_vars: app id = 2, nvram data size = 94
nvram_retrieve_vars: app id = 3, nvram data size = 183
nvram_retrieve_vars: app id = 4, nvram data size = 490<4>NULL

nvram_retrieve_vars: app id = 5, nvram data size = 294
nvram_retrieve_vars: app id = 6, nvram data size = 113
nvram_retrieve_vars: app id = 10, nvram data size = 164
nvram_retrieve_vars: app id = 9, nvra<6>eth1: Switch is set for 100 Mbps Full Duplex
m data size = 564
nvram_retrieve_vars: app id = 12, nvram data size = 118
nvram_retrieve_vars: app id = 11, nvram data size = 266
nvram_retrieve_vars: app id = 8, nvram data size = 266
nvram_retrieve_vars: app id = 13, nvram data size = 132
nvram_retrieve_vars: app id = 14, nvram data size = 474
nvram_retrieve_vars: app id = 15, nvram data size<6>device eth0 entered promiscuous mode
 = 535
<6>br0: port 1(eth0) entering learning state
<6>br0: port 1(eth0) entering forwarding state
<6>br0: topology change detected, propagating
<6>device wlan1 entered promiscuous mode
WLAN: channel = 11
<4>Reading Configuration File "/var/apcfg".
<4>apcfg: read # = Copyright (c) 2002 Atheros Communications, Inc., All Rights Reserved
<4>apcfg: read # = DO NOT EDIT -- This configuration file is automatically generated by the Access Point
<4>apcfg: read magic = Ar52xxAP
<4>apcfg: read CountryCode = 276
<4>apcfg: read WirelessMode = 11g
<4>apcfg: read autochanselect = Disable
<4>apcfg: read RadioChannel = 2462
<4>apcfg: read DataRate = best
<4>apcfg: read ssid = WR-6640Sg
<4>apcfg: read ssidSuppress = Disable
<4>apcfg: read Keytable = 6
<4>apcfg: read Keyentrymethod = ascii
<4>apcfg: read Key = 1 104 wwwwwwwwwwwww
<4>apcfg: read Key = 2 104 wwwwwwwwwwwww
<4>apcfg: read Key = 3 104 wwwwwwwwwwwww
<4>apcfg: read Key = 4 104 wwwwwwwwwwwww
<4>apcfg: read DefaultKey = 1
<4>apcfg: read Keysource = flash
<4>apcfg: read encryption = Disable
<4>apcfg: read cipher = auto
<4>apcfg: read AuthenticationType = Open-System
<4>apcfg: read RADIUSaddr = 
<4>apcfg: read RADIUSport = 1812
<4>apcfg: read RADIUSsecret = 
<4>apcfg: read passphraseKey = 
<4>apcfg: read groupKeyUpdateInterval = 1800
<4>ar5hwcQueueCreate : Queue Head = 0x80450000, Queue Tail = 0x80457f80
<4>ar5hwcQueueCreate : Queue Head = 0x800b0000, Queue Tail = 0x800b7f80
<4>ar5hwcQueueCreate : Queue Head = 0x80088000, Queue Tail = 0x8008ff80
<4>ar5hwcQueueCreate : Queue Head = 0x80d7c000, Queue Tail = 0x80d7ff80
<4>wireless access point starting...
<4>wlan1 Ready
<4>Ready
<4>sta_proc_init: ==> start
<4>sta_proc_init: <== end
<6>br0: port 2(wlan1) entering learning state
Firewall Initializing...
<6>br0: port 2(wlan1) entering forwarding state
<6>br0: topology change detected, propagating
Firewall Setup...
Virtual Server Initializing...
Access Control List Initializing...
Content Filter Initializing...
Hex:0x1
Hex:0x0
Hex:0x0
Hex:0x0
Syslog Initializing...
close Remote Log
<4>
<4>plog->slog_pid=121

xsyslogd started.
close Remote Log
<4>wlan1 beacon transmission problem at beacon #10! - no SWBAs seen!
<4>Enter resetwlan
<4>wlan1 beacon transmission problem at beacon #0! - no SWBAs seen!

# uname -a
uname: not found
# uptime
uptime: not found
# ls
apcfg     hosts     log       rad-dict  run       sys       tmp       wan
# cd /
# ls
bin         etc         proc        upnp        web
dev         lost+found  sbin        var
# 
}}}

XXX todo: list some files from standard linxu at end of page



= XXXX Work-In-Progress - rest of page copied from fonera ... XXXX =


= Why not using the original PMon bootloader =

    * pmon hat alle notwendigen kommandos, tftp-load, flash write, exec (go)
    * wir wissen nicht genau, wie die linux-startadresse anzugeben ist, go
      startet anscheinend genau an der angegebenen addresse
    * offen ist, ob der linux kernel die mtd partitionen richtig erkennt,
      linux benutzt anscheinend die redboot fis kennung.



= Installing OpenWrt with RedBoot =
Once you have gained access to [:RedBoot:!RedBoot] either by telnet or the
serial console you can install [:OpenWrt:!OpenWrt] with the following method.

Note: instructions below also worked on FON2200

You have to download two files (right click and save as).

 * [http://downloads.openwrt.org/kamikaze/7.09/atheros-2.6/openwrt-atheros-2.6-vmlinux.lzma
 * openwrt-atheros-2.6-vmlinux.lzma]
 * [http://downloads.openwrt.org/kamikaze/7.09/atheros-2.6/openwrt-atheros-2.6-root.squashfs
 * openwrt-atheros-2.6-root.squashfs]
Copy openwrt-atheros-2.6-vmlinux.lzma and openwrt-atheros-2.6-root.squashfs to
/tftpboot/ and flash them like this:

{{{
^C
RedBoot> ip_address -h 192.168.5.2 -l 192.168.5.75/24
IP: 192.168.5.75/255.255.255.0, Gateway: 0.0.0.0
Default server: 192.168.5.2
RedBoot> load -r -b %{FREEMEMLO} openwrt-atheros-2.6-vmlinux.lzma
Using default protocol (TFTP)
Raw file loaded 0x80041000-0x800f0fff, assumed entry at 0x80041000
RedBoot> fis init}}}
The values for the -e and -r switches in the 'fis create' !RedBoot command
below is the Kernel entry point. Do not change this value.

{{{
RedBoot> fis create -e 0x80041000 -r 0x80041000 vmlinux.bin.l7
An image named 'vmlinux.bin.l7' exists - continue (y/n)? y
... Erase from 0xa8730000-0xa87e0000: ...........
... Program from 0x80041000-0x800f1000 at 0xa8730000: ...........
... Erase from 0xa87e0000-0xa87f0000: .
... Program from 0x80ff0000-0x81000000 at 0xa87e0000: .
}}}
"fis free" will print the first and last free block

{{{
RedBoot> fis free
      0xA80F0000 .. 0xA87E0000
}}}
Now do the math (last - first, cause you need the difference)

{{{
server:~# bc
obase=16
ibase=16
A87E0000 - A80F0000
6F0000
}}}
Replace ''0xLENGTH'' with the value above (0x006F0000 in my case) and flash
the the rootfs:

{{{
RedBoot> load -r -b %{FREEMEMLO} openwrt-atheros-2.6-root.squashfs
Using default protocol (TFTP)
|
Raw file loaded 0x80041000-0x80200fff, assumed entry at 0x80041000
RedBoot> fis create -l 0xLENGTH rootfs
An image named 'rootfs' exists - continue (y/n)? y
... Erase from 0xa8030000-0xa8730000:
................................................................................................................
... Program from 0x80041000-0x80741000 at 0xa8030000:
..............................................................................................................
... Erase from 0xa87e0000-0xa87f0000: .
... Program from 0x80ff0000-0x81000000 at 0xa87e0000: .
RedBoot> reset
}}}
If everything is okay, then it will now look like this:

{{{
+PHY ID is 0022:5521
...
== Executing boot script in 1.000 seconds - enter ^C to abort
RedBoot> fis load -l vmlinux.bin.l7
Image loaded from 0x80041000-0x80290085
RedBoot> exec
Now booting linux kernel:
 Base address 0x80030000 Entry 0x80041000
 Cmdline :
Linux version 2.6.21.5 (ubuntu@ubuntu-laptop) (gcc version 4.1.2) #1 Sat Sep
29 11:04:17 CEST 2007
CPU revision is: 00019064
Determined physical RAM map:
 memory: 01000000 @ 00000000 (usable)
Initrd not found or empty - disabling initrd
Built 1 zonelists.  Total pages: 4064
Kernel command line: console=ttyS0,9600 rootfstype=squashfs,jffs2
init=/etc/preinit
Primary instruction cache 16kB, physically tagged, 4-way, linesize 16 bytes.
Primary data cache 16kB, 4-way, linesize 16 bytes.
Synthesized TLB refill handler (20 instructions).
Synthesized TLB load handler fastpath (32 instructions).
Synthesized TLB store handler fastpath (32 instructions).
Synthesized TLB modify handler fastpath (31 instructions).
PID hash table entries: 64 (order: 6, 256 bytes)
Using 92.000 MHz high precision timer.
Dentry cache hash table entries: 2048 (order: 1, 8192 bytes)
Inode-cache hash table entries: 1024 (order: 0, 4096 bytes)
Memory: 13504k/16384k available (1955k kernel code, 2880k reserved, 292k data,
116k init, 0k highmem)
Mount-cache hash table entries: 512
NET: Registered protocol family 16
Radio config found at offset 0xf8(0x1f8)
Time: MIPS clocksource has been installed.
NET: Registered protocol family 2
IP route cache hash table entries: 1024 (order: 0, 4096 bytes)
TCP established hash table entries: 512 (order: 0, 4096 bytes)
TCP bind hash table entries: 512 (order: -1, 2048 bytes)
TCP: Hash tables configured (established 512 bind 512)
TCP reno registered
squashfs: version 3.0 (2006/03/15) Phillip Lougher
Registering mini_fo version $Id$
JFFS2 version 2.2. (NAND) (C) 2001-2006 Red Hat, Inc.
io scheduler noop registered
io scheduler deadline registered (default)
Serial: 8250/16550 driver $Revision: 1.90 $ 1 ports, IRQ sharing disabled
serial8250: ttyS0 at MMIO 0xb1100003 (irq = 37) is a 16550A
eth0: Dropping NETIF_F_SG since no checksum feature.
eth0: Atheros AR231x: 00:18:84:14:39:94, irq 4
cmdlinepart partition parsing not available
Searching for RedBoot partition table in spiflash at offset 0x7d0000
Searching for RedBoot partition table in spiflash at offset 0x7e0000
5 RedBoot partitions found on MTD device spiflash
Creating 5 MTD partitions on "spiflash":
0x00000000-0x00030000 : "RedBoot"
0x00030000-0x000f0000 : "vmlinux.bin.l7"
0x000f0000-0x007e0000 : "rootfs"
0x00200000-0x007e0000 : "rootfs_data"
0x007e0000-0x007ef000 : "FIS directory"
0x007ef000-0x007f0000 : "RedBoot config"
nf_conntrack version 0.5.0 (128 buckets, 1024 max)
ip_tables: (C) 2000-2006 Netfilter Core Team
TCP vegas registered
NET: Registered protocol family 1
NET: Registered protocol family 17
802.1Q VLAN Support v1.8 Ben Greear <greearb@candelatech.com>
All bugs added by David S. Miller <davem@redhat.com>
VFS: Mounted root (squashfs filesystem) readonly.
Freeing unused kernel memory: 116k freed
Warning: unable to open an initial console.
eth0: Configuring MAC for full duplex
Algorithmics/MIPS FPU Emulator v1.5
- preinit -
jffs2 not ready yet; using ramdisk
mini_fo: using base directory: /
mini_fo: using storage directory: /tmp/root
- init -
init started:  BusyBox v1.4.2 (2007-09-26 19:44:01 CEST) multi-call binary
Please press Enter to activate this console. device eth0 entered promiscuous
mode
br-lan: port 1(eth0) entering learning state
br-lan: topology change detected, propagating
br-lan: port 1(eth0) entering forwarding state
PPP generic driver version 2.4.2
wlan: 0.8.4.2 (svn r2568)
ath_hal: module license 'Proprietary' taints kernel.
ath_hal: 0.9.30.13 (AR5212, AR5312, RF2316, TX_DESC_SWAP)
ath_rate_minstrel: Minstrel automatic rate control algorithm 1.2 (svn r2568)
ath_rate_minstrel: look around rate set to 10%
ath_rate_minstrel: EWMA rolloff level set to 75%
ath_rate_minstrel: max segment size in the mrr set to 6000 us
wlan: mac acl policy registered
ath_ahb: 0.9.4.5 (svn r2568)
ath_pci: switching rfkill capability off
ath_pci: switching per-packet transmit power control off
wifi0: 11b rates: 1Mbps 2Mbps 5.5Mbps 11Mbps
wifi0: 11g rates: 1Mbps 2Mbps 5.5Mbps 11Mbps 6Mbps 9Mbps 12Mbps 18Mbps 24Mbps
36Mbps 48Mbps 54Mbps
wifi0: H/W encryption support: WEP AES AES_CCM TKIP
wifi0: mac 11.0 phy 4.8 radio 7.0
wifi0: Use hw queue 1 for WME_AC_BE traffic
wifi0: Use hw queue 0 for WME_AC_BK traffic
wifi0: Use hw queue 2 for WME_AC_VI traffic
wifi0: Use hw queue 3 for WME_AC_VO traffic
wifi0: Use hw queue 8 for CAB traffic
wifi0: Use hw queue 9 for beacons
wifi0: Atheros 2315 WiSoC: mem=0xb0000000, irq=3
jffs2_scan_eraseblock(): End of filesystem marker found at 0x0
jffs2_build_filesystem(): unlocking the mtd device... done.
jffs2_build_filesystem(): erasing all blocks after the end marker... done.
mini_fo: using base directory: /
mini_fo: using storage directory: /jffs
BusyBox v1.4.2 (2007-09-26 19:44:01 CEST) Built-in shell (ash)
Enter 'help' for a list of built-in commands.
  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 KAMIKAZE (7.09) -----------------------------------
  * 10 oz Vodka       Shake well with ice and strain
  * 10 oz Triple sec  mixture into 10 shot glasses.
  * 10 oz lime juice  Salute!
 ---------------------------------------------------
root@OpenWrt:/#
}}}
'''NOTE''': If you changed !RedBoot's baud rate to something different than
9600bps, revert that change unless your terminal program does auto baud
detection -- !OpenWrt logs to its serial console with 9600bps, so having the
same baud rate in !RedBoot is a good idea.

== Installing openwrt with reboot via expect ==
First you need to have the tftp server working then you need cu , to access
the serial port , expect to execute this script. once you have the files
needed in the tftp dir you can exec this  script (save it to a file and exec
it via expect "file name")

{{{
#!/usr/bin/expect -f
spawn cu -l /dev/ttyS0 -s 9600
#match_max 100000
set timeout 3600
# Look for passwod prompt
expect "enter ^C to abort"
send \003
# send blank line (\r) to make sure we get back to gui
expect "RedBoot>"
send -- "ip_address -h 192.168.1.13 -l 192.168.1.21/24\r"
expect "RedBoot>"
send -- "fis init\r"
expect "(y/n)? "
send -- "y\r"
expect "RedBoot>"
send -- "load -r -b %\{FREEMEMLO\} openwrt-atheros-vmlinux.lzma\r"
expect "RedBoot>"
send -- "fis create -e 0x80041000 -r 0x80041000 vmlinux.bin.l7\r"
expect "RedBoot>"
send -- "load -r -b %\{FREEMEMLO\} openwrt-atheros-root.squashfs\r"
expect "RedBoot>"
send -- "fis create -l 0x006F0000 rootfs\r"
expect "RedBoot>"
send -- "reset\r"
}}}
= Telnet into RedBoot =
You can change the !RedBoot configuration, so you can later telnet into this
bootloader in order to reflash this device from there, without having serial
access.

The default form of the fconfig command will force you to enter the data,
change and confirm every initialized variable. To avoid reentering the '''Boot
script''' data and harming unnecessary variables, run the "fconfig list"
command first to look at variable names and values:

{{{
RedBoot> fconfig -l -n
boot_script: true
boot_script_data:
.. fis load -l vmlinux.bin.l7
.. exec
boot_script_timeout: 1
bootp: false
bootp_my_gateway_ip: 0.0.0.0
bootp_my_ip: 0.0.0.0
bootp_my_ip_mask: 255.255.255.255
bootp_server_ip: 0.0.0.0
console_baud_rate: 9600
gdb_port: 9000
info_console_force: false
net_debug: false
}}}
Next change only necessary variables (using their names from the previous
listing) and update the !RedBoot non-volatile configuration after the last
change:

{{{
RedBoot> fconfig boot_script_timeout 10
boot_script_timeout: Setting to 10
Update RedBoot non-volatile configuration - continue (y/n)? n
RedBoot> fconfig bootp_my_ip 192.168.5.22
Update RedBoot non-volatile configuration - continue (y/n)? n
RedBoot> fconfig bootp_my_ip_mask 255.255.255.0
Update RedBoot non-volatile configuration - continue (y/n)? n
RedBoot> fconfig bootp_server_ip 192.168.5.2
Update RedBoot non-volatile configuration - continue (y/n)? y
... Erase from 0xa87e0000-0xa87f0000: .
... Program from 0x80ff0000-0x81000000 at 0xa87e0000: .
}}}
'''Note:''''' ''The configuration is only in the RAM until you update'' ''the
!RedBoot non-volatile configuration. If you reset the device without updating,
the configuration will not be changed. You can use changes without the update
for temporary settings.

Verify the configuration by listing the aliases this time:

{{{
RedBoot> fconfig -l
Run script at boot: true
Boot script:
.. fis load -l vmlinux.bin.l7
.. exec
Boot script timeout (1000ms resolution): 10
Use BOOTP for network configuration: false
Gateway IP address: 0.0.0.0
Local IP address: 192.168.5.22
Local IP address mask: 255.255.255.0
Default server IP address: 192.168.5.2
Console baud rate: 9600
GDB connection port: 9000
Force console for special debug messages: false
Network debug at boot time: false
}}}
I specified a 10 second timeout here, so I have this 10 second time frame to
telnet into !RedBoot. If you are not able to hit the enter-key within 10
seconds after powering up, go for a larger time frame.

{{{
+PHY ID is 0022:5521
Ethernet eth0: MAC address xx:xx:xx:xx:xx:xx
IP: 192.168.5.22/255.255.255.0, Gateway: 0.0.0.0
Default server: 192.168.5.2
RedBoot(tm) bootstrap and debug environment [ROMRAM]
Non-certified release, version v1.3.0 - built 16:57:58, Aug  7 2006
Copyright (C) 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
Board: ap51
RAM: 0x80000000-0x81000000, [0x80040450-0x80fe1000] available
FLASH: 0xa8000000 - 0xa87f0000, 128 blocks of 0x00010000 bytes each.
== Executing boot script in 10.000 seconds - enter ^C to abort
}}}
Actually I had problems with my old BSD telnet on Slackware 11 to send a
proper CTRL-C to the !RedBoot console. I circumvented the problem with this
small trick:

{{{
$ echo -e "\0377\0364\0377\0375\0006" > break
$ nc -vvv 192.168.5.22 9000 < break ; telnet 192.168.5.22 9000
Warning: Inverse name lookup failed for `192.168.5.22'
192.168.5.22 9000 open
== Executing boot script in 7.420 seconds - enter ^C to abort
ÿü^C
RedBoot> ÿüExiting.
Total received bytes: 82
Total sent bytes: 6
Trying 192.168.5.22...
Connected to 192.168.5.22.
Escape character is '^]'.
RedBoot>
}}}
I have to CTRL-C abort netcat.

The CTRL-C problem seems to be caused by a disabled TELNET LINEMODE option.
When you enable this option by creating a file ~/.telnetrc with the following
contents:

{{{
192.168.5.22 9000
        mode line
}}}
You can interrupt redboot with CTRL-C:

{{{
$ arping -qf 192.168.5.22 ; telnet 192.168.5.22 9000
WARNING: interface is ignored: Operation not permitted
Trying 192.168.5.22...
?Invalid command
Connected to 192.168.5.22.
Escape character is '^]'.
== Executing boot script in 9.940 seconds - enter ^C to abort
^C
RedBoot>
}}}
The boot process is somehow signalled via the LEDs, first only the power LED
is on, then the internet LED starts blinking, and when this internet LED is
solid green, it is the right time to connect to the !RedBoot console.

This is the point, where I disconnected the serial cable and closed the case.
If the kernel is booting and SSH working, I do not need any debug-stuff in
between. It is possible to unbrick the fonera with this !RedBoot console, as I
can always reflash to a working firmware.

= Reflash the RedBoot Config from SSH... =
In order to get the access to !RedBoot through an ethernet cable instead of
the serial console.

As we can see via 'dmesg' there is a mtd for the !RedBoot config:

{{{
<5>Creating 6 MTD partitions on "spiflash":
<5>0x00000000-0x00030000 : "RedBoot"
<5>0x00030000-0x00720000 : "rootfs"
<5>0x00730000-0x007e0000 : "vmlinux.bin.l7"
<5>0x007e0000-0x007ef000 : "FIS directory"
<5>0x007ef000-0x007f0000 : "RedBoot config"
<5>0x007f0000-0x00800000 : "board_config"
}}}
We can even dump that mtd content with

{{{
root@OpenWrt:~# cat /dev/mtd/4ro > /tmp/redboot_config
root@OpenWrt:~# strings /tmp/redboot_config
boot_script
boot_script_data
boot_script
fis load -l vmlinux.bin.l7
exec
boot_script_timeout
boot_script
bootp
bootp_my_gateway_ip
bootp
bootp_my_ip
bootp
bootp_my_ip_mask
bootp
bootp_server_ip
console_baud_rate
gdb_port
info_console_force
info_console_number
info_console_force
net_debug
}}}
It should be possible to use such a file to reflash other foneras in order to
gain !RedBoot access without ever opening the case. As long as someone can
gain shell access to the Fonera, he could enable !RedBoot telnet access to his
Fonera and fiddle around with it. With this !RedBoot GDB console, you can
always restore the original firmware, even if your fonera does not boot your
latest Linux experiment.

This would be nice, but does not work, as the "!RedBoot config" mtd partion is
not writable.

{{{
root@OpenWrt:~# mtd write /tmp/redboot_config "RedBoot config"
}}}
According to this [http://www.dd-wrt.com/phpBB2/viewtopic.php?p=49585#49585
post], you can make this partition writable, if you add in
kernel/driver/mtd/mtdpart.c after line 435

{{{
                        if (!(slave->mtd.flags & MTD_WRITEABLE)){
                        slave->mtd.flags |= MTD_WRITEABLE;
                        printk ("mtd: partition \"%s\" was read-only -- force
writable -- CAMICIA HACK\n",
                                parts[i].name);
                        }
}}}
So you have to reflash the Kernel with a Kernel image, that allows writing to
the !RedBoot config partition and then reflash that config partition in order
to gain access to the !RedBoot console.

Please note that they were not writeable for a reason. Writing "!RedBoot
config" is probably going to reset the FIS directory because it is on the same
"erase sector". This is not a major problem since with !RedBoot we can easily
recreate them using the command "fis init" and to install !OpenWrt we must do
this anyway.

This whole procedure is described
[http://www.dd-wrt.com/phpBB2/viewtopic.php?t=9011 here].

The basic steps are:

{{{
root@OpenWrt:~# cd /tmp
root@OpenWrt:~# wget
http://ipkg.k1k2.de/hack/openwrt-ar531x-2.4-vmlinux-CAMICIA.lzma
root@OpenWrt:~# Connecting to ipkg.k1k2.de[85.10.200.90]:80
openwrt-ar531x-2.4-v 100% |**************************|   512 KB    00:00 ETA
root@OpenWrt:~# mtd -e vmlinux.bin.l7 write
openwrt-ar531x-2.4-vmlinux-CAMICIA.lzma vmlinux.bin.l7
Unlocking vmlinux.bin.l7 ...
Erasing vmlinux.bin.l7 ...
Writing from openwrt-ar531x-2.4-vmlinux-CAMICIA.lzma to vmlinux.bin.l7 ... [w]
root@OpenWrt:~# reboot
... wait ...
root@OpenWrt:~# cd /tmp
root@OpenWrt:~# wget http://ipkg.k1k2.de/hack/out.hex
root@OpenWrt:~# Connecting to ipkg.k1k2.de[85.10.200.90]:80
out.hex 100% |*******************************| 4096 00:00 ETA
root@OpenWrt:~# mtd -e "RedBoot config" write out.hex "RedBoot config"
Unlocking RedBoot config ...
Erasing RedBoot config ...
Writing from out.hex to RedBoot config ... [w]
root@OpenWrt:~# reboot
...wait...
$ telnet 192.168.1.254 9000
RedBoot> fis init
}}}
= Install The Fonera Pack (from sven-ola): FON + Mesh Network =
After obtaining ssh and Redboot access, you can either use the manual install
of Kamikaze described above or use
[http://download.berlin.freifunk.net/fonera/readme.txt sven-ola Freifunk
upgrade] with "EasyFlash" that does all the dirty job by itself!!

This distribution allow to create Fonera's Mesh Networks as described
[http://blog.freifunk.net/2007/fonera-pack-story here]

{{{
1) Connect the Fonera to the ethernet jack. Use a cross linked cable.
2) Switch on the network card, and run update:
> sudo ifconfig eth0 up
> wget http://download.berlin.freifunk.net/fonera/ap51-flash-fonera-1.0-38
> sudo ./ap51-flash-fonera-1.0-38 eth0
  rootfs(0x006a0000) + kernel(0x00100000) + nvram(0x00000000) sums up to
0x007a0000 bytes
  Peer MAC: 00:18:84:15:53:20
  Peer IP : 192.168.1.254
  Your MAC: 00:ba:be:ca:ff:ee
  Your IP : 192.168.1.0
  Setting IP address...
  Loading rootfs...
  Sending rootfs, 4608 blocks...
  Initializing partitions...
  Rootfs partition size now 0x006b0000
  Flashing rootfs...
          Loading kernel...
  Sending kernel, 2048 blocks...
  Flashing kernel...
  Setting boot_script_data...
  Done. Restarting device...
}}}
= Basic configuration =
== Use LAN as WAN port (with NAT) ==
1. Connect to the LAN port on the Fonera and [#enablewifi configure wireless]

2. Connect wirelessly to the Fonera to make sure wireless works

/!\ '''NOTE:''' before you continue make sure wireless works!

3. Reconfigure the LAN as WAN port

Remove the LAN port from the bridge

{{{
uci del network.lan.ifname}}}
Add a new section for the WAN interface, the WAN interface is eth0 and the WAN
protocol is DHCP.

{{{
uci set network.wan=interface
uci set network.wan.ifname=eth0
uci set network.wan.proto=dhcp}}}
Save your changes

{{{
uci commit network}}}
Reread the configuration and reconfigure the network interfaces

{{{
ifup -a && wifi
/etc/init.d/firewall restart}}}
'''TIP:''' Now you can also configure PPPoE and QoS. See below.

== PPPoE ==
All required packages are already installed in the default image.To configure
PPPoE with UCI, do this:

{{{
uci set network.wan.proto=pppoe
uci set network.wan.username=<pppoe_psername>
uci set network.wan.password=<pppoe_password>
uci commit network && ifup wan}}}
== QoS ==
Install the qos-scripts package

{{{
ipkg install qos-scripts
}}}
Basic QoS configuration using UCI:

{{{
uci set qos.wan.upload=192            # Upload speed in KB
uci set qos.wan.download=2048         # Download speed in KB
uci commit qos}}}
Start QoS and enable on next boot

{{{
/etc/init.d/qos start
/etc/init.d/qos enable
}}}
== Dynamic DNS ==
Please see [:DDNSHowTo:Dynamic DNS].

[[Anchor(enablewifi)]] [[Anchor(EnableWiFi)]]

== WiFi ==
This describes the !WiFi configuration with the Fonera acting in plain AP
mode.

=== Enable WiFi ===
{{{
uci set wireless.wifi0.disabled=0
uci commit wireless && wifi}}}
[[Anchor(wpa)]] [[Anchor(WPA)]]

=== WiFi encryption ===
Plese see OpenWrtDocs/KamikazeConfiguration/WiFiEncryption.

 . [[Anchor(WiFi toggle)]]
 . [[Anchor(wifitoggle)]]
=== WiFi toggle ===
Turn !WiFi on/off with the Reset [#Buttons button]. Please see the
[:OpenWrtDocs/Customizing/Software/WifiToggle:WiFi toggle] Wiki page.

=== List connected clients ===
{{{
wlanconfig ath0 list}}}
= Hardware Hacks =
As with most routers, the Fonera has some gpio pins that extra hardware can be
connected to. Here are 2 interesting hardware hacks :

 * [http://www.phrozen.org/fonera.html Adding a MMC card to the Fonera]
 * [http://www.phrozen.org/fonera.html Turning the Foneras into a hardware mp3 client]
