= Installing a WL-500G Image =

The WL-500G behaves a little differently to other OpenWRT devices: rather than use the NVRAM ''boot_wait'' variable, the loader enters "recovery mode" if the reset button is pressed when powering up. In "recovery mode" the device starts flashing the Power LED and sits and waits for a new image, sent via TFTP.

== Recovery Mode ==

 * the device processes any Ethernet frame addressed to it, regardless of IP address
  * it responds to some packets (e.g. ICMP ping) by simply swapping the incoming source and destination address (i.e. the source address of the response will be whatever was in the destination of the request)
 * an IP address is ''usually'' required to be assigned to the device for TFTP to work (most TFTP clients require each packet to be acknowledged)
  * the desired IP address is communicated to the router in the first TFTP message, via the TFTP get command
   * the TFTP source file name is `ASUSSPACELINKxxxx`, where `xxxx` is the desired IP address ''in binary''. i.e. the 32 bit IP address is written as four octets, in ASCII, representing the IP address in little-endian order: so the IP address `100.99.98.97` = becomes the ASCII string `abcd` ("a" = 97 in ASCII, "d" = 100, etc).
   * the router uses the assigned address to acknowledge the TFTP get command, and the image is then written (put) via TFTP to the special destination filename `ASUSSPACELINK`

For example, the operation of the Windows ASUS Recovery Utility is as follows (determined from packet traces):
 1. the PC sends, every 5s, TFTP GET packets to the broadcast address (ff:ff:ff:ff:ff:ff / 255.255.255.255), requesting the magic string as above
 2. the router responds with a TFTP Data packet and ACK with the source address set to that specified in the magic string
 3. the PC sends a TFTP WRITE request to destination file named ''ASUSSPACELINK''
 4. the router ACKnowledges the write request, and the image transfer begins
 5. the router reboots after (presumably checking) and then writing the image to flash

== TFTP Clients and the ASUSSPACELINK String ==

A problem arises in that most TFTP utilities can't include binary data in a filename (i.e. if the assigned address is 10.0.0.99, the magic string should be `"ASUSSPACELINK" . 0x6300000a`). Common string quoting convention suggests to use `ASUSSPACELINK\x63\x00\x00\x0a`, though most (all?) tftp programs will interpret that as a string of sixteen characters after the ASUSSPACELINK: `... \ x 6 3 ...`, or in ASCII `... 92 120 54 51 ... `, which will assign the IP address 51.54.120.92.

Fortunately, it seems that the router doesn't care that received packets have an incorrect destination IP address (only that the ethernet address is correct), and in addition it uses the "swap source and destination" shortcut when acknowledging those same packets
 * packets that are generated by the device will have the assigned address, but TFTP is a pretty forgiving protocol  
 * the net result is that it doesn't matter what you put in the magic string, so long as:
  * you fix the ARP entry for the arbitrary assigned IP address
  * you use a TFTP client that isn't too picky about the replies it gets from the device,  (e.g. ''atftp'' works, OS X's inbuilt ''tftp'' does not)


== Example Packet Trace ==

For example, an annotated packet trace from a successful image installation:
 * target WL-500G has MAC address `00:11:2f:6a:60:13`
 * workstation has static ARP entry for `10.1.0.99` = `00:11:2f:6a:60:13`
 * the string "aaaa" = 97,97,97,97 in ASCII
{{{
  $ atftp 10.1.0.99
  tftp> mode octet
  tftp> get ASUSSPACELINKaaaa /dev/null
00:47:27.944204 workstation       > 00:11:2f:6a:60:13, length 68: 10.1.0.1.33202 > 10.1.0.99.69:  26 RRQ "ASUSSPACELINKaaaa" octet 
00:47:27.944626 00:11:2f:a6:60:31 > workstation      , length 46: 97.97.97.97.69 > 10.1.0.1.33202:  4 DATA block 1
00:47:27.944788 workstation       > gateway          , length 46: 10.1.0.1.33202 > 97.97.97.97.69:  4 ACK block 1
00:47:27.944843 00:11:2f:6a:60:13 > workstation      , length 46: 97.97.97.97.69 > 10.1.0.1.33202:  4 ACK block 0

  tftp> put openwrt-brcm-2.4-jffs2-4MB.trx ASUSSPACELINK
00:47:50.417806 workstation       > 00:11:2f:6a:60:13, length 64: 10.1.0.1.33202 > 10.1.0.99.69:  22 WRQ "ASUSSPACELINK" octet 
00:47:50.418334 00:11:2f:6a:60:13 > workstation      , length 46: 10.1.0.99.69 > 10.1.0.1.33202:  4 ACK block 0
00:47:50.418527 workstation       > 00:11:2f:6a:60:13, length 558: 10.1.0.1.33202 > 10.1.0.99.69:  516 DATA block 1
00:47:50.419050 00:11:2f:6a:60:13 > workstation      , length 46: 10.1.0.99.69 > 10.1.0.1.33202:  4 ACK block 1
00:47:50.419145 workstation       > 00:11:2f:6a:60:13, length 558: 10.1.0.1.33202 > 10.1.0.99.69:  516 DATA block 2
00:47:50.419665 00:11:2f:6a:60:13 > workstation      , length 46: 10.1.0.99.69 > 10.1.0.1.33202:  4 ACK block 2
00:47:50.419755 workstation       > 00:11:2f:6a:60:13, length 558: 10.1.0.1.33202 > 10.1.0.99.69:  516 DATA block 3

...

00:47:52.536992 00:11:2f:6a:60:13 > workstation      , length 46: 10.1.0.99.69 > 10.1.0.1.33202:  4 ACK block 3456
00:47:52.537218 workstation       > 00:11:2f:6a:60:13, length 46: 10.1.0.1.33202 > 10.1.0.99.69:  4 DATA block 3457
00:47:52.537538 00:11:2f:6a:60:13 > workstation      , length 46: 10.1.0.99.69 > 10.1.0.1.33202:  4 ACK block 3457
00:47:54.001026 00:11:2f:a6:60:31 > workstation      , length 46: 97.97.97.97.69 > 10.1.0.1.33202:  4 tftp-#6
00:47:54.001101 workstation       > gateway          , length 74: 10.1.0.1 > 97.97.97.97: ICMP 10.1.0.1 udp port 33202 unreachable, length 40
00:47:55.463051 00:11:2f:a6:60:31 > workstation      , length 46: 97.97.97.97.69 > 10.1.0.1.33202:  4 tftp-#6
00:47:55.463117 workstation       > gateway          , length 74: 10.1.0.1 > 97.97.97.97: ICMP 10.1.0.1 udp port 33202 unreachable, length 40
00:47:56.924749 00:11:2f:a6:60:31 > workstation      , length 46: 97.97.97.97.69 > 10.1.0.1.33202:  4 tftp-#6
00:47:56.924814 workstation       > gateway          , length 74: 10.1.0.1 > 97.97.97.97: ICMP 10.1.0.1 udp port 33202 unreachable, length 40

}}}

Observations:
 * packets generated by the WL-500G have an incorrect MAC address (last octet is `:31` rt. `:13`)
 * packets generated by the WL-500G have the assigned source IP address of 97.97.97.97 (i.e. not the IP address used to start the client), but atftp doesn't care
  * when the workstation tries to acknowledge the WL-500G's DATA, it uses the return IP address from the WL-500G (i.e. simply swaps the DATA packet's addresses) and as that address is not on the local network it sends the packet to the workstation's gateway router (and presumably on to the Internet!)
  * fortunately, the WL-500G doesn't care that it doesn't receive these ACKs

 * when the transfer is complete, the WL-500G sends some unknown TFTP option packets (`tftp-#6`) which the workstation tries to respond to via ICMP; these also end up going out to the wild blue yonder
